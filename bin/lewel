#!/usr/bin/env python3
# coding: utf-8
import sys
import os
from json import load, dump, decoder


class NORMAL:
    black = "\x1b[30m"
    red = "\x1b[31m"
    green = "\x1b[32m"
    yellow = "\x1b[33m"
    blue = "\x1b[34m"
    magenta = "\x1b[35m"
    cyan = "\x1b[36m"
    white = "\x1b[37m"


class LIGHT:
    black = "\x1b[90m"
    red = "\x1b[91m"
    green = "\x1b[92m"
    yellow = "\x1b[93m"
    blue = "\x1b[94m"
    magenta = "\x1b[95m"
    cyan = "\x1b[96m"
    white = "\x1b[97m"


END = "\x1b[0m"
shadow_image = ".assist/.plew"


# Configurations
main_directory = os.path.dirname(__file__)
json_path = os.path.join(main_directory, "config/config.json")
try:
    with open(json_path) as config_file:
        config_data = load(config_file)
    should_display_image = config_data["should_display_image"]
    should_display_text = config_data["should_display_text"]
    should_display_blocks = config_data["should_display_blocks"]
    space_before = config_data["space_before"]
    space_after = config_data["space_after"]
    lines_before = config_data["lines_before"]
    lines_after = config_data["lines_after"]
except FileNotFoundError:
    print(LIGHT.red + "Configuration file missing. Reinstall or find configuration in README" + END)
    sys.exit(0)
except decoder.JSONDecodeError:
    print(LIGHT.red + "Configuration file corrupted. Reinstall or find configuration in README" + END)
    sys.exit(0)


def open_image():
    try:
        abs_path = os.path.join(main_directory, shadow_image)
        with open(abs_path, "r") as image_file:
            return image_file.readlines()
    except FileNotFoundError:
        print("Image file doesn't exist. Try reinitializing program with " +
              LIGHT.green + "lewel init" + END + " and then adding a prexel or an image")
        sys.exit(0)


def system_image():
    image_lines = open_image()
    for line in image_lines:
        print(' ' * space_before, end='')
        print(line, end='')
    print()


def system_message():
    import detailer
    details = detailer.detail_list()
    for line in details:
        print(' ' * space_before, end='')
        print(line, end='\n')


def system_message_image():
    import detailer
    details = detailer.detail_list()
    image_lines = open_image()
    length = 0
    if len(image_lines) > len(details):
        length = len(image_lines)
        diff = len(image_lines) - len(details)
        details.extend([""] * diff)
    else:
        length = len(details)
        diff = len(details) - len(image_lines)
        spacer = ' ' * (len(image_lines[0].split(' ')) - 1)
        image_lines.extend([spacer] * diff)
    for line in range(length):
        print(' ' * space_before, end='')
        print(image_lines[line].replace('\n', ''), end='')
        print(' ' * space_after, end='')
        print(details[line], end='\n')


def run_lewel():
    print('\n' * lines_before, end='')
    if should_display_image == True and should_display_text == True:
        system_message_image()
    if should_display_image == False and should_display_text == True:
        system_message()
    if should_display_image == True and should_display_text == False:
        system_image()
    if should_display_text == False and should_display_blocks == True:
        system_message()
    print('\n' * lines_after, end='')


def setup_lewel():
    import imager
    import detailer
    print()
    choice = input(LIGHT.green +
                   "Do you want to upload a prexel (1) an image (2) or just reinitialize (ANY)? " +
                   END)
    if choice == "1":  # PREXEL IMPORT
        from shutil import copyfile
        print(LIGHT.magenta + "\n(1) Using custom prexel image... " + END, end='')
        try:
            path = input(LIGHT.yellow + "Enter prexel path: " + END)
            abs_plew = os.path.join(main_directory, shadow_image)
            copyfile(path, abs_plew)
        except FileNotFoundError:
            print(LIGHT.red + "\n!!! No valid file provided !!!" + END)
    elif choice == "2":  # IMAGE IMPORT
        print(LIGHT.magenta + "\n(2) Using normal picture:" + END, end='\n')
        print(LIGHT.red + "\n!!! In number of cursor columns and cursor rows !!!" + END, end='\n')
        width = 0
        height = 0
        while True:
            try:
                width = int(input(LIGHT.yellow + "\nWIDTH: " + END))
                height = int(input(LIGHT.yellow + "\nHEIGHT: " + END))
                break
            except ValueError:
                print(LIGHT.red + "\nOne of the values entered is not an integer" + END)
        try:
            path = input(LIGHT.yellow + "\nEnter photo path: " + END)
            image = imager.create_image(path, width, height)
            imager.write_image(image)
        except FileNotFoundError:
            print(LIGHT.red + "\n!!! No valid file provided !!!" + END)
    abs_path = os.path.join(main_directory, ".assist/details.json")
    with open(abs_path, "w", encoding="utf-8") as detail_file:
        init_data = {
            'userstring': detailer.get_userstring(),
            'osstring': detailer.get_osstring(),
            'make_manufacture': detailer.get_make_manufacture(),
            'shellstring': detailer.get_shellstring()
        }
        dump(init_data, detail_file, ensure_ascii=False, indent=4)


def config_lewel():
    class TooBigError(Exception):
        pass

    class UnfinishedProcessError(Exception):
        pass
    from yaml import safe_load
    yaml_path = os.path.join(main_directory, "config/.config_options.yaml")
    try:
        with open(yaml_path, 'r') as config_options_file:
            yaml_data = safe_load(config_options_file)
    except FileNotFoundError:
        print(LIGHT.red + "Configuration options file missing. Reinstall or find options list\n" + END)
        sys.exit(0)
    for i, (key, value) in enumerate(config_data.items()):
        print(LIGHT.magenta + "[%d]" %
              (i + 1) + LIGHT.yellow + " %s" % key + END)
    print(NORMAL.red + "[0]" + LIGHT.red + " to cancel" + END)
    while True:
        while True:
            try:
                choice = input(LIGHT.green +
                               "\nChoose a property to configure...\nPress [0] to save or [h] for help: " +
                               LIGHT.magenta)
                if choice == "h":
                    raise UnfinishedProcessError
                elif int(choice) > len(config_data.items()):
                    raise TooBigError
                break
            except UnfinishedProcessError:
                for i, (key, value) in enumerate(config_data.items()):
                    print(LIGHT.magenta + "[%d]" %
                          (i + 1) + LIGHT.yellow + " %s" % key + END)
            except TooBigError:
                print(NORMAL.red + "\nERROR: Option doesn't exist" + END)
            except ValueError:
                print(NORMAL.red + "\nERROR: Not a number" + END)
        if int(choice) == 0:
            print(
                LIGHT.red + "\nSaving changes and quitting command line configuration wizard" + END)
            break
        key, value = list(config_data.items())[int(choice) - 1]
        option_value = list(yaml_data.values())[int(choice) - 1]
        if type(value) is list:
            value = "[" + ', '.join(value) + "]"
        print("\n" + LIGHT.blue + key + ": " +
              LIGHT.yellow + str(value) + END, end="\n")
        COLORS = {
            "black":            "\x1b[30m",
            "red":              "\x1b[31m",
            "green":            "\x1b[32m",
            "yellow":           "\x1b[33m",
            "blue":             "\x1b[34m",
            "magenta":          "\x1b[35m",
            "cyan":             "\x1b[36m",
            "white":            "\x1b[37m",
            "light black":      "\x1b[90m",
            "light red":        "\x1b[91m",
            "light green":      "\x1b[92m",
            "light yellow":     "\x1b[93m",
            "light blue":       "\x1b[94m",
            "light magenta":    "\x1b[95m",
            "light cyan":       "\x1b[96m",
            "light white":      "\x1b[97m"
        }
        while True:
            valid_options = option_value[1:-1].split('/')
            new_value = input(LIGHT.red + "Enter [TAB] to go back\nEnter your new value %s: " % option_value +
                              LIGHT.yellow)
            if new_value == "\t":
                break
            if (any(option in new_value for option in valid_options) and
                    option_value != "(<percent/values/both>, <GB/MiB>)") or option_value == "(anything/[ENTER])":
                config_data[key] = new_value
                break
            elif option_value == "(color)":
                if any(color in new_value for color in list(COLORS.keys())):
                    config_data[key] = new_value
                    break
                else:
                    print(NORMAL.red +
                          "\nWrong color, see the following valid colors:")
                    all_colors = []
                    for color in list(COLORS.keys()):
                        all_colors.append(
                            COLORS[color] + "[" + color + "]" + END)
                    normal_colors = all_colors[0:8]
                    light_colors = all_colors[8:]
                    for i in range(int(len(all_colors) / 2)):
                        print(light_colors[i] + "\t" +
                              normal_colors[i], end='\n')
                    print()
            elif option_value == "(number)":
                try:
                    config_data[key] = int(new_value)
                    break
                except ValueError:
                    print(NORMAL.red + "\nERROR: Not a number\n" + END)
            elif option_value == "(<percent/values/both>, <GB/MiB>)":
                arrayed_option = option_value[1:-1].split(', ')
                arrayed_option = [arrayed_option[i]
                                  [1:-1].split('/') for i in range(2)]
                user_option = new_value[1:-1].split(', ') \
                    if any(bracket in new_value for bracket in ['[', ']']) else new_value.split(', ')
                if len(user_option) > 1:
                    if (user_option[0] in arrayed_option[0]) and (user_option[1] in arrayed_option[1]):
                        config_data[key] = user_option
                        break
                    else:
                        print(NORMAL.red + "\n1 or more of the options " + LIGHT.red +
                              "[%s, %s]" % (user_option[0], user_option[1]) + NORMAL.red +
                              " dont match the suggested options\n" + END)
                else:
                    print(NORMAL.red +
                          "\nNot enough options added. Type the 2 suggested options separated by a comma\n" +
                          END)
            else:
                print(NORMAL.red + "\nERROR: Wrong choice, see options in brackets\n")
        if new_value != "\t":
            if str(value).find("[") != -1 and new_value.find("[") == -1:
                new_value = "[" + new_value + "]"
            print(LIGHT.green + key + ": " + LIGHT.yellow + new_value + END)
        else:
            print(LIGHT.magenta + "\nGoing back to selection menu..." + END)
        print("\n--- --- --- --- --- ---")
    with open(json_path, 'w') as config_file:
        for k in list(config_data.keys()):
            if config_data[k] == "true":
                config_data[k] = True
            if config_data[k] == "false":
                config_data[k] = False
            if config_data[k] == "null":
                config_data[k] = None
        dump(config_data, config_file, indent=4)


if __name__ == '__main__':
    if len(sys.argv) > 1:
        if sys.argv[1] == "init":
            try:
                setup_lewel()
            except KeyboardInterrupt:
                print(LIGHT.red + "\n\nYou've quit the application" + END)
                sys.exit(0)
        elif sys.argv[1] == "reset":
            abs_plew = os.path.join(main_directory, shadow_image)
            abs_json = os.path.join(main_directory, ".assist/details.json")
            try:
                os.remove(abs_plew)
            except FileNotFoundError:
                print(LIGHT.red + "Image doesn't exist... trying other\n" + END)
            try:
                os.remove(abs_json)
            except FileNotFoundError:
                print(LIGHT.red +
                      "Detail metadata doesn't exist... trying other\n" + END)
            print(LIGHT.red + "You've reseted your application. Use " +
                  LIGHT.green + "lewel init" + LIGHT.red + " to initialize your welcome screen" + END)
        elif sys.argv[1] == "config":
            from subprocess import call
            if len(sys.argv) == 3:
                if sys.argv[2] == "vim":
                    call(["vim", json_path])
                elif sys.argv[2] == "open":
                    call(["open", json_path])
            else:
                try:
                    config_lewel()
                except KeyboardInterrupt:
                    print(NORMAL.red + "\n\nYou've quit the application" + END)
                    sys.exit(0)
        elif sys.argv[1] == "help":
            abs_help = os.path.join(main_directory, ".assist/.help")
            from subprocess import call
            call(["cat", abs_help])
        else:
            print(LIGHT.red + "The command " +
                  LIGHT.green + "lewel <%s> " % sys.argv[1] +
                  LIGHT.red + "doesn't exist. Try running " +
                  LIGHT.green + "lewel help" +
                  LIGHT.red + " for a list of valid commands" + END)
    else:
        run_lewel()
